import{createRequire as e}from"module";var t={738:(e,t,s)=>{const r=s(147),n=s(17),o=s(37),a=s(113),i=s(968).version,c=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function d(e){console.log(`[dotenv@${i}][DEBUG] ${e}`)}function l(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function u(e,t){let s;try{s=new URL(t)}catch(e){if("ERR_INVALID_URL"===e.code)throw new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development");throw e}const r=s.password;if(!r)throw new Error("INVALID_DOTENV_KEY: Missing key part");const n=s.searchParams.get("environment");if(!n)throw new Error("INVALID_DOTENV_KEY: Missing environment part");const o=`DOTENV_VAULT_${n.toUpperCase()}`,a=e.parsed[o];if(!a)throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${o} in your .env.vault file.`);return{ciphertext:a,key:r}}function p(e){let t=n.resolve(process.cwd(),".env");return e&&e.path&&e.path.length>0&&(t=e.path),t.endsWith(".vault")?t:`${t}.vault`}const g={configDotenv:function(e){let t=n.resolve(process.cwd(),".env"),s="utf8";const a=Boolean(e&&e.debug);var i;e&&(null!=e.path&&(t="~"===(i=e.path)[0]?n.join(o.homedir(),i.slice(1)):i),null!=e.encoding&&(s=e.encoding));try{const n=g.parse(r.readFileSync(t,{encoding:s}));let o=process.env;return e&&null!=e.processEnv&&(o=e.processEnv),g.populate(o,n,e),{parsed:n}}catch(e){return a&&d(`Failed to load ${t} ${e.message}`),{error:e}}},_configVault:function(e){console.log(`[dotenv@${i}][INFO] Loading env from encrypted .env.vault`);const t=g._parseVault(e);let s=process.env;return e&&null!=e.processEnv&&(s=e.processEnv),g.populate(s,t,e),{parsed:t}},_parseVault:function(e){const t=p(e),s=g.configDotenv({path:t});if(!s.parsed)throw new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);const r=l(e).split(","),n=r.length;let o;for(let e=0;e<n;e++)try{const t=u(s,r[e].trim());o=g.decrypt(t.ciphertext,t.key);break}catch(t){if(e+1>=n)throw t}return g.parse(o)},config:function(e){const t=p(e);return 0===l(e).length?g.configDotenv(e):r.existsSync(t)?g._configVault(e):(s=`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`,console.log(`[dotenv@${i}][WARN] ${s}`),g.configDotenv(e));var s},decrypt:function(e,t){const s=Buffer.from(t.slice(-64),"hex");let r=Buffer.from(e,"base64");const n=r.slice(0,12),o=r.slice(-16);r=r.slice(12,-16);try{const e=a.createDecipheriv("aes-256-gcm",s,n);return e.setAuthTag(o),`${e.update(r)}${e.final()}`}catch(e){const t=e instanceof RangeError,s="Invalid key length"===e.message,r="Unsupported state or unable to authenticate data"===e.message;if(t||s)throw new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");if(r)throw new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw console.error("Error: ",e.code),console.error("Error: ",e.message),e}},parse:function(e){const t={};let s,r=e.toString();for(r=r.replace(/\r\n?/gm,"\n");null!=(s=c.exec(r));){const e=s[1];let r=s[2]||"";r=r.trim();const n=r[0];r=r.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===n&&(r=r.replace(/\\n/g,"\n"),r=r.replace(/\\r/g,"\r")),t[e]=r}return t},populate:function(e,t,s={}){const r=Boolean(s&&s.debug),n=Boolean(s&&s.override);if("object"!=typeof t)throw new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");for(const s of Object.keys(t))Object.prototype.hasOwnProperty.call(e,s)?(!0===n&&(e[s]=t[s]),r&&d(!0===n?`"${s}" is already defined and WAS overwritten`:`"${s}" is already defined and was NOT overwritten`)):e[s]=t[s]}};e.exports.configDotenv=g.configDotenv,e.exports._configVault=g._configVault,e.exports._parseVault=g._parseVault,e.exports.config=g.config,e.exports.decrypt=g.decrypt,e.exports.parse=g.parse,e.exports.populate=g.populate,e.exports=g},113:t=>{t.exports=e(import.meta.url)("crypto")},147:t=>{t.exports=e(import.meta.url)("fs")},37:t=>{t.exports=e(import.meta.url)("os")},17:t=>{t.exports=e(import.meta.url)("path")},968:e=>{e.exports=JSON.parse('{"name":"dotenv","version":"16.3.1","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://github.com/motdotla/dotenv?sponsor=1","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3","decache":"^4.6.1","sinon":"^14.0.1","standard":"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0","tap":"^16.3.0","tar":"^6.1.11","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}')}},s={};function r(e){var n=s[e];if(void 0!==n)return n.exports;var o=s[e]={exports:{}};return t[e](o,o.exports,r),o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var s in t)r.o(t,s)&&!r.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{const t=e(import.meta.url)("http");r(738).config();const s={PORT:process.env.PORT||5e3,NODE_ENV:"production"},n=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;var o=r(113),a=r.n(o);const i={randomUUID:a().randomUUID},c=new Uint8Array(256);let d=c.length;function l(){return d>c.length-16&&(a().randomFillSync(c),d=0),c.slice(d,d+=16)}const u=[];for(let e=0;e<256;++e)u.push((e+256).toString(16).slice(1));const p=function(e,t,s){if(i.randomUUID&&!t&&!e)return i.randomUUID();const r=(e=e||{}).random||(e.rng||l)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){s=s||0;for(let e=0;e<16;++e)t[s+e]=r[e];return t}return function(e,t=0){return(u[e[t+0]]+u[e[t+1]]+u[e[t+2]]+u[e[t+3]]+"-"+u[e[t+4]]+u[e[t+5]]+"-"+u[e[t+6]]+u[e[t+7]]+"-"+u[e[t+8]]+u[e[t+9]]+"-"+u[e[t+10]]+u[e[t+11]]+u[e[t+12]]+u[e[t+13]]+u[e[t+14]]+u[e[t+15]]).toLowerCase()}(r)};class g{static httpMethodsWithBody=["POST","PUT"];requests={GET:{},POST:{},DELETE:{},PUT:{}};async handlerRequest(e,t){const s=e.method,r=this.requests[s],n=this.findMatchingHandler(e,r);if(n)return await this.requestsWithBody(e),t.setHeader("content-type","application/json"),n(e,t);t.statusCode=404,t.write("The request doesn't exist"),t.end()}async requestsWithBody(e){if(g.httpMethodsWithBody.includes(e.method)){const t=await g.getRequestBody(e)||{};e.body=t}}findMatchingHandler(e,t){let s;for(const r in t){const n=this.getRegexpFromPath(r);n.test(e.url)&&(e.parameters=e.url.match(n)?.groups||{},s=t[r])}return s}getRegexpFromPath(e){const t=e.replace(/(.*)({(.*)})/,"$1(?<$3>.*)");return new RegExp(t)}get(e,t){this.requests.GET[e]=t}post(e,t){this.requests.POST[e]=t}put(e,t){this.requests.PUT[e]=t}delete(e,t){this.requests.DELETE[e]=t}static getRequestBody(e){let t="";return e.on("data",(e=>{t+=e.toString()})),new Promise(((s,r)=>{e.on("end",(()=>{try{const e=JSON.parse(t);s(e)}catch(e){r(e)}s()})),e.on("error",(e=>{r(e)}))}))}getInstance(){return this}}const f={isValidateData(e){const t=e.username&&"string"==typeof e.username,s=isFinite(e.age)&&e.age>=0,r=Array.isArray(e.hobbies)&&e.hobbies.every((e=>"string"==typeof e));return s&&r&&t}};process.USERS=[{id:1,username:"anvar"},{id:2,username:"anvar"},{id:3,username:"anvar"},{id:4,username:"anvar"},{id:5,username:"anvar"}];const m=async e=>process.USERS.find((t=>t.id==e)),h={getAllUSer:async()=>process.USERS,getOneUser:m,addUser:async e=>process.USERS.push(e),updateUser:async(e,t)=>{const s=await m(e);return Object.assign(s,t)},deleteOne:async e=>{const t=process.USERS.findIndex((t=>t.id===e));if(t>-1)return process.USER.splice(t,1)}},v=new g,y=(e,t)=>{const s="string"==typeof(r=t)&&n.test(r);var r;return s||(e.statusCode=400,e.write(JSON.stringify({message:"The user id is not valid uuid"})),e.end()),s};v.get("/api/users",(async(e,t)=>{t.statusCode=200,t.write(JSON.stringify(await h.getAllUSer())),t.end()})),v.get("/api/users/{userId}",(async(e,t)=>{const{userId:s}=e.parameters,r=JSON.stringify(await h.getOneUser(s));r?(t.write(r),t.statusCode=200):(t.statusCode=404,t.write(JSON.stringify({message:"The user is not found"}))),t.end()})),v.post("/api/users",(async(e,t)=>{const s=e.body;if(!f.isUserDataValid(s))return t.statusCode=400,t.write(JSON.stringify({message:"Invalid data for request"})),void t.end();const r={id:p(),username:s.username,age:s.age,hobbies:s.hobbies},n=await h.addUser(r);t.statusCode=201,t.end(JSON.stringify(n))})),v.put("/api/users/{userId}",(async(e,t)=>{const{userId:s}=e.parameters,r=e.body,n=await h.getOneUser(s);if(y(t,s)){if(n){if(!f.isUserDataValid(r))return t.statusCode=400,t.write(JSON.stringify({message:"Invalid data for request"})),void t.end();const e=await h.updateUser(s,r);t.statusCode=200,t.write(JSON.stringify(e))}else t.statusCode=404,t.write(JSON.stringify({message:"The user is not found"}));t.end()}})),v.delete("/api/users/{userId}",(async(e,t)=>{const{userId:s}=e.parameters;y(t,s)&&(await h.deleteUser(s)?(t.statusCode=204,t.write(JSON.stringify({message:"The user has been deleted"}))):(t.statusCode=404,t.write(JSON.stringify({message:"The user is not found"}))),t.end())}));const E=v,{PORT:w}=s;(async()=>{const e=(0,t.createServer)((async(e,t)=>{console.log("The request was handled on port: "+w);try{await E.handlerRequest(e,t)}catch(e){(e=>{e.statusCode=500,e.write("Something was wrong on server side"),e.end()})(t)}}));await new Promise(((t,s)=>{e.listen(w,(async()=>{console.log(`Server is listening on port ${w}`),t(e)}))}))})()})();